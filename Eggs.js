// Generated by CoffeeScript 1.3.3
(function() {
  var Eggs, Model, escapeRegExp, namedParam, optionalParam, routeStripper, splatParam;

  Eggs = this.Eggs = {};

  routeStripper = /^[#\/]|\s+$/g;

  Eggs.currentLocation = (function() {
    var getFragment, getHash, hasHashChange, hasPushState, location, windowLocationStream, _ref;
    location = typeof window !== "undefined" && window !== null ? window.location : void 0;
    hasPushState = location != null ? (_ref = location.history) != null ? _ref.pushState : void 0 : void 0;
    hasHashChange = 'onhashchange' in window;
    getHash = function() {
      var match;
      match = location.href.match(/#(.*)$/);
      if (match) {
        return match[1];
      } else {
        return '';
      }
    };
    getFragment = function(fragment) {
      if (!fragment) {
        if (hasPushState || !hasHashChange) {
          fragment = location.pathname;
        } else {
          fragment = getHash();
        }
      }
      return fragment.replace(routeStripper, '');
    };
    if (hasPushState) {
      windowLocationStream = Bacon.fromEventTarget(window, 'popstate');
    } else if (hasHashChange) {
      windowLocationStream = Bacon.fromEventTarget(window, 'hashchange');
    } else {
      windowLocationStream = Bacon.interval(100);
    }
    return windowLocationStream.map(function() {
      return getFragment();
    }).skipDuplicates().toProperty(getFragment());
  })();

  optionalParam = /\((.*?)\)/g;

  namedParam = /(\(\?)?:\w+/g;

  splatParam = /\*\w+/g;

  escapeRegExp = /[\-{}\[\]+?.,\\\^$|#\s]/g;

  Eggs.route = function(route) {
    if (!_.isRegExp(route)) {
      route = route.replace(escapeRegExp, '\\$&').replace(optionalParam, '(?:$1)?').replace(namedParam, function(match, optional) {
        if (optional) {
          return match;
        } else {
          return '([^\/]+)';
        }
      }).replace(splatParam, '(.*?)');
      route = new RegExp('^' + route + '$');
    }
    return Eggs.currentLocation.filter(function(location) {
      return route.test(location);
    }).map(function(location) {
      return route.exec(location).slice(1);
    });
  };

  Model = (function() {

    function Model(attributes, options) {
      var attrs, bus, defaults, propertyDefault, propertyName,
        _this = this;
      options = _.defaults({
        validate: true
      }, options);
      attrs = attributes || {};
      if (defaults = _.result(this, 'defaults')) {
        attrs = _.defaults({}, attrs, defaults);
      }
      this.busses = {};
      this.uncheckedProperties = {};
      for (propertyName in attrs) {
        propertyDefault = attrs[propertyName];
        this.busses[propertyName] = bus = new Bacon.Bus;
        this.uncheckedProperties[propertyName] = bus.toProperty(propertyDefault);
      }
      this.attributesBus = new Bacon.Bus;
      this.attributes = this.attributesBus.toProperty(attrs);
      this.uncheckedAttributes = Bacon.combineTemplate(this.uncheckedProperties);
      this.uncheckedAttributes.onValue(function(attrObject) {
        var error;
        if (options.validate && (error = typeof _this.validate === "function" ? _this.validate(attrObject) : void 0)) {
          return _this.attributesBus.error(error);
        } else {
          return _this.attributesBus.push(attrObject);
        }
      });
      this.properties = {};
      for (propertyName in attrs) {
        this.properties[propertyName] = this.attributes.map("." + propertyName);
      }
    }

    Model.prototype.property = function(propertyName, value) {
      var _ref;
      if (_.isUndefined(value)) {
        return this.properties[propertyName];
      } else {
        return (_ref = this.busses[propertyName]) != null ? _ref.push(value) : void 0;
      }
    };

    return Model;

  })();

  Eggs.model = function(extension) {
    var Surrogate, child, parent;
    parent = Model;
    if (extension && _.has(extension, 'constructor')) {
      child = extension.constructor;
    } else {
      child = function() {
        return parent.apply(this, arguments);
      };
    }
    Surrogate = (function() {

      function Surrogate() {
        this.constructor = child;
      }

      return Surrogate;

    })();
    Surrogate.prototype = parent.prototype;
    child.prototype = new Surrogate;
    if (extension) {
      _.extend(child.prototype, extension);
    }
    child.__super__ = parent.prototype;
    return child;
  };

}).call(this);
